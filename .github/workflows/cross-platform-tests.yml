name: Cross Platform Tests

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test Environment'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - staging
      browser_set:
        description: 'Browser Set'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - chrome
          - firefox
          - edge
          - safari

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chrome, firefox, edge]
        exclude:
          # Safari sadece macOS'ta çalışır
          - os: ubuntu-latest
            browser: safari
          - os: windows-latest
            browser: safari
          # Edge Linux'ta çalışmaz
          - os: ubuntu-latest
            browser: edge
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Set up Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest

    - name: Set up Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest

    - name: Set up Edge
      if: matrix.browser == 'edge' && matrix.os != 'ubuntu-latest'
      uses: browser-actions/setup-edge@latest

    - name: Set up Safari (macOS only)
      if: matrix.browser == 'safari' && matrix.os == 'macos-latest'
      run: |
        sudo safaridriver --enable
        defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically 1

    - name: Set up Xvfb (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y xvfb
        Xvfb :99 &
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Create Directories
      run: |
        mkdir -p target/cucumber-reports
        mkdir -p target/surefire-reports
        mkdir -p target/allure-results
        mkdir -p target/screenshots

    - name: Run Tests
      env:
        CI: true
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
        DISPLAY: ${{ matrix.os == 'ubuntu-latest' && ':99' || '' }}
      run: |
        mvn clean test \
        -Dtest.environment=${{ inputs.test_environment }} \
        -DCI=true \
        -Dwebdriver.verbose=true \
        -Dbrowser=${{ matrix.browser }} \
        -Dheadless=true \
        -Dsurefire.useFile=true \
        -Dmaven.test.failure.ignore=true \
        -Dtest.user.email=${TEST_USER_EMAIL} \
        -Dtest.user.password=${TEST_USER_PASSWORD}

    - name: Generate Cucumber Reports
      if: always()
      run: |
        echo "Checking if cucumber.json exists"
        ls -l target/cucumber-reports/
        echo "Generating Cucumber Reports"
        mvn verify -DskipTests \
        -Dcucumber.report.formats=json \
        -Dcucumber.report.outputDirectory=target/cucumber-reports \
        -Dcucumber.json.output.directory=target/cucumber-reports \
        -Dcucumber.json.output.file=target/cucumber-reports/cucumber.json

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.browser }}
        path: |
          target/cucumber-reports/
          target/surefire-reports/
          target/screenshots/
        if-no-files-found: warn

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (${{ matrix.os }} - ${{ matrix.browser }})
        path: "target/surefire-reports/TEST-*.xml"
        reporter: java-junit
        fail-on-error: false

  notify:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Send Test Summary
      run: |
        echo "Cross Platform Test Summary"
        echo "Environment: ${{ inputs.test_environment }}"
        echo "Browser Set: ${{ inputs.browser_set }}"
        echo "Status: ${{ needs.test.result }}"
